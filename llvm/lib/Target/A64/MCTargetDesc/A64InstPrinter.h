//===-- A64InstPrinter.h - Convert A64 MCInst to assembly syntax ----------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This class prints an A64 MCInst to a .s file.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_A64_MCTARGETDESC_A64INSTPRINTER_H
#define LLVM_LIB_TARGET_A64_MCTARGETDESC_A64INSTPRINTER_H

#include "MCTargetDesc/A64MCTargetDesc.h"
#include "llvm/ADT/StringRef.h"
#include "llvm/MC/MCInstPrinter.h"

namespace llvm {

class A64InstPrinter : public MCInstPrinter {
public:
  A64InstPrinter(const MCAsmInfo &MAI, const MCInstrInfo &MII,
                 const MCRegisterInfo &MRI);

  void printInst(const MCInst *MI, uint64_t Address, StringRef Annot,
                 const MCSubtargetInfo &STI, raw_ostream &O) override;
  void printRegName(raw_ostream &OS, unsigned RegNo) const override;
  void printLogicalImm(const MCInst *MI, unsigned OpNum, raw_ostream &O);
  void printShifter(const MCInst *MI, unsigned OpNum, raw_ostream &O);
  void printShiftedRegister(const MCInst *MI, unsigned OpNum, raw_ostream &O);

  // Autogenerated by tblgen.
  std::pair<const char *, uint64_t> getMnemonic(const MCInst *MI) override;
  virtual void printInstruction(const MCInst *MI, uint64_t Address,
                                raw_ostream &O);
  virtual bool printAliasInstr(const MCInst *MI, uint64_t Address,
                               raw_ostream &O);
  virtual void printCustomAliasOperand(const MCInst *MI, uint64_t Address,
                                       unsigned OpIdx, unsigned PrintMethodIdx,
                                       raw_ostream &O);
  virtual StringRef getRegName(unsigned RegNo) const {
    return getRegisterName(RegNo);
  }

  // Operand printers
  void printOperand(const MCInst *MI, unsigned OpNo, raw_ostream &O);

  void printImm(const MCInst *MI, unsigned OpNo, raw_ostream &O);

  void printAddSubImm(const MCInst *MI, unsigned OpNum, raw_ostream &O);
  static const char *getRegisterName(unsigned RegNo);
};

} // end namespace llvm

#endif // LLVM_LIB_TARGET_A64_MCTARGETDESC_A64INSTPRINTER_H
