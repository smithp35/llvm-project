//===-- A64ISelDAGToDAG.cpp - A dag to dag inst selector for A64 ---------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the A64 target.
//
//===----------------------------------------------------------------------===//

#include "A64.h"
#include "A64InstrInfo.h"
#include "A64TargetMachine.h"
#include "llvm/CodeGen/SelectionDAGISel.h"

using namespace llvm;

#define DEBUG_TYPE "a64-isel"

//===--------------------------------------------------------------------===//
/// A64DAGToDAGISel - A64 specific code to select A64 machine
/// instructions for SelectionDAG operations.
///
namespace {

class A64DAGToDAGISel : public SelectionDAGISel {

public:
  explicit A64DAGToDAGISel(A64TargetMachine &tm, CodeGenOpt::Level OptLevel)
      : SelectionDAGISel(tm, OptLevel) {}

  void Select(SDNode *Node) override;

  StringRef getPassName() const override {
    return "A64 DAG -> DAG Pattern Instruction Selection";
  }

  bool SelectArithShiftedRegister(SDValue N, SDValue &Reg, SDValue &Shift) {
    return SelectShiftedRegister(N, false, Reg, Shift);
  }
  bool SelectLogicalShiftedRegister(SDValue N, SDValue &Reg, SDValue &Shift) {
    return SelectShiftedRegister(N, true, Reg, Shift);
  }
  bool SelectAddrModeIndexed64(SDValue N, SDValue &Base, SDValue &OffImm) {
    return SelectAddrModeIndexed(N, 8, Base, OffImm);
  }

  // Autogenerated from target description
#include "A64GenDAGISel.inc"

private:
  bool SelectShiftedRegister(SDValue N, bool AllowROR, SDValue &Reg,
                             SDValue &Shift);
  bool SelectAddrModeIndexed(SDValue N, unsigned Size, SDValue &Base,
                             SDValue &OffImm);
};
} // End anonymous namespace

void A64DAGToDAGISel::Select(SDNode *Node) {
  // Forward to generated function.
  SelectCode(Node);
}

bool A64DAGToDAGISel::SelectShiftedRegister(SDValue N, bool AllowROR,
                                            SDValue &Reg, SDValue &Shift) {
  // TODO Implement
  assert(false);
  return false;
}
bool A64DAGToDAGISel::SelectAddrModeIndexed(SDValue N, unsigned Size,
                                            SDValue &Base, SDValue &OffImm) {
  // TODO Implement
  assert(false);
  return false;
}

/// createA64ISelDag - This pass converts a legalized DAG into a
/// A64-specific DAG, ready for instruction scheduling.
FunctionPass *llvm::createA64ISelDag(A64TargetMachine &TM,
                                     CodeGenOpt::Level OptLevel) {
  return new A64DAGToDAGISel(TM, OptLevel);
}
